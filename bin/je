#!/bin/bash

# je pour JavaExecute : permet de compiler un fichier.java avec javac puis d'éxécuter le bin produit

# ERROR-21: aide affiché car demandée
# ERROR-22: aide affiché car mauvaise utilisation (argument non acceptè car pas un option posssible)
# ERROR-23: lorsque le paramètre passé à la commande n'est pas un ficher

# =[ VARIABLES ]====================================================================================
nom=$(echo $0 | rev | cut -d "/" -f1 | rev)         # Récupère le nom de la commande
dossier=$(echo $0 | rev | cut -d "/" -f2- | rev)    # Récupère l'emplacement de la commande
fichier=$1

# =[ FONCTIONS ]====================================================================================
# Affiche l'aide et l'usage de la commande check_ssh
function usage(){
    echo "La fonction ${nom} se trouve dans ${dossier}"
    echo "Cette commande permet de compiler un fichier.java puis d'éxécuter le binaire produit."
    echo -e "\nUsage: $nom -[vh] [fichier.java]"
    echo -e "\n L'option -h(--help) permet d'afficher l'usage"
    echo -e "\n L'option -v(--verbose)rend la fonction tchatty!"
}
 
# Permet de lancer la compilation du fichier passé en argument (même si extension omise)
function compile_execute(){
    [[ ${fichier} != *".java" ]] &&  fichier="${fichier}.java"
    if [[ -f ${fichier} ]];then
        javac ${fichier} && java ${fichier//\.java/}
    else
        echo "${fichier} n'est pas un fichier présent dans le répertoire actuel"
        exit 23
    fi
    return 0
}

# =[ MAIN() ]=======================================================================================
## i) Trop d'argument : affiche l'usage
[[ ! $# -eq 1 ]] && usage && exit 22
## ii) 1 argument : différents cas rencontrés:
case "$1" in
    "-h"|"--help") usage && exit 21 ;;
    *) compile_execute ;;
esac
