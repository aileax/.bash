#!/bin/bash

# Petit programme vérifiant si :
#   - 1 arg : l'emplacement actuel de l'utilisateur se trouve bien dans l'arborescence du dossier
#   passé en argument
#   - 2 args : que le fichier/dossier passé en 1er arg est dans l'arborescence (descendant) du
#   dossier passé en argument 2

# =[ VARIABLES ]====================================================================================
nom=$(echo $0 | rev | cut -d "/" -f1 | rev)      # Récupère le nom de la commande
dossier=$(echo $0 | rev | cut -d "/" -f2- | rev) # Récupère l'emplacement de la commande
arg1=$1
# Affectation conditionnelle de la variable arg2
if [[ $# -eq 2 ]];then
    arg2=$2
else
    arg2=$(pwd)
fi

# affectation des variables chemins en remplaçant les espaces par "\ "
parent=${arg1// /\\ }
enfant=${arg2// /\\ }

# =[ FONCTIONS ]====================================================================================
usage(){
    echo -e "${nom} localisée dans $0"
    echo "Fonctionnelle permettant de savoir si un chemin_enfant est dans l'arborescence d'un
    chemin_parent"
    echo -e "\nUsage : \`$: ${nom} [-h] <chemin_parent> [<chemin_enfant>:default=pwd]\`\n"
}

is_in_arbo(){
    [[ ${enfant} =~ ${parent}* ]] && return 0 || return 1
}

# -[ MAIN() ]---------------------------------------------------------------------------------------
# i) Pas d'argument
[[ $# -eq 0 ]] && usage && echo "coucou 1" && exit 1
# ii) Trop d'argument
[[ $# -gt 2 ]] && usage && exit 2
# iii) Differents cas:
[[ ! -d ${arg2} ]] && echo "Le dossier passé en paramètre 1:'${arg1}' n'existe pas" && exit 2
[[ ! -d ${arg1} ]] && echo "Le dossier passé en paramètre 2:'${arg2}' n'existe pas" && exit 4
case "${enfant}" in
    "-h"|"--help") usage && exit 12 ;;
    * ) is_in_arbo && exit 0 || exit 1;;
esac
