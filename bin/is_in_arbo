#!/bin/bash

# Petit programme vérifiant si :
#   - 1 arg : l'emplacement actuel de l'utilisateur se trouve bien dans l'arborescence du dossier
#   passé en argument
#   - 2 args : que le fichier/dossier passé en 1er arg est dans l'arborescence (descendant) du
#   dossier passé en argument 2

# =[ VARIABLES ]====================================================================================
nom=$(echo $0 | rev | cut -d "/" -f1 | rev)      # Récupère le nom de la commande
dossier=$(echo $0 | rev | cut -d "/" -f2- | rev) # Récupère l'emplacement de la commande
parent=$1
# Affectation conditionnelle de la variable parent(arbo. dans laquelle rechercher )
[[ $# -eq 2 ]] && enfant=$2 || enfant=$(pwd)

# =[ FONCTIONS ]====================================================================================
usage(){
    echo -e "${nom} localisée dans $0"
    echo "Fonctionnelle permettant de savoir si un chemin_enfant est dans l'arborescence d'un
    chemin_parent"
    echo -e "\nUsage : \`$: ${nom} [-h] <chemin_parent> [<chemin_enfant>:default=pwd]\`\n"
}

is_in_arbo(){
    [[ ${enfant} =~ ${parent}* ]] && return 0 || return 1
}

# -[ MAIN() ]---------------------------------------------------------------------------------------
## i) Trop peu d'argument : affiche l'usage
[[ $# -lt 1 ]] && usage && exit 11
## ii) Trop d'argument : affiche l'usage
[[ $# -gt 2 ]] && usage && exit 21
## ii) 1 ou 2 arguments : 
[[ ! -d ${enfant} ]] && echo "Le dossier passé en paramètre 1 n'existe pas" && exit 2
[[ ! -d ${parent} ]] && echo "Le dossier passé en paramètre 2 n'existe pas" && exit 4
case "${enfant}" in
    "-h"|"--help") usage && exit 12 ;;
    * ) is_in_arbo && exit 0 || exit 1;;
esac
